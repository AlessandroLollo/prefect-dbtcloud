{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-dbtcloud Welcome! Collection of tasks to interact with dbt Cloud Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-dbtcloud with pip : pip install prefect-dbtcloud Write and run a flow from prefect import flow from prefect_dbtcloud.tasks import ( run_job ) @flow def trigger_dbt_cloud_job_run (): run_job ( cause = \"<the motivation to run the job>\" , account_id =< your dbt Cloud Account ID > , job_id =< the identifier of the job to run > , token = \"<your dbt Cloud API token>\" , wait_for_job_run_completion = False ) trigger_dbt_cloud_job_run () Resources If you encounter any bugs while using prefect-dbtcloud , feel free to open an issue in the prefect-dbtcloud repository. If you have any questions or issues while using prefect-dbtcloud , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Development If you'd like to install a version of prefect-dbtcloud for development, clone the repository and perform an editable install with pip : git clone https://github.com/AlessandroLollo/prefect-dbtcloud.git cd prefect-dbtcloud/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-dbtcloud","text":"","title":"prefect-dbtcloud"},{"location":"#welcome","text":"Collection of tasks to interact with dbt Cloud","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-dbtcloud with pip : pip install prefect-dbtcloud","title":"Installation"},{"location":"#write-and-run-a-flow","text":"from prefect import flow from prefect_dbtcloud.tasks import ( run_job ) @flow def trigger_dbt_cloud_job_run (): run_job ( cause = \"<the motivation to run the job>\" , account_id =< your dbt Cloud Account ID > , job_id =< the identifier of the job to run > , token = \"<your dbt Cloud API token>\" , wait_for_job_run_completion = False ) trigger_dbt_cloud_job_run ()","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter any bugs while using prefect-dbtcloud , feel free to open an issue in the prefect-dbtcloud repository. If you have any questions or issues while using prefect-dbtcloud , you can find help in either the Prefect Discourse forum or the Prefect Slack community .","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-dbtcloud for development, clone the repository and perform an editable install with pip : git clone https://github.com/AlessandroLollo/prefect-dbtcloud.git cd prefect-dbtcloud/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"tasks/","text":"prefect_dbtcloud.tasks Tasks to interact with dbt Cloud run_job Run a dbt Cloud job. Parameters: Name Type Description Default cause str A string describing the reason for triggering the job run. required api_domain str Custom domain for API call. None account_id Optional[int] dbt Cloud account ID. Can also be passed as an env var. None job_id Optional[int] dbt Cloud job ID None token Optional[str] dbt Cloud token. Please note that this token must have access at least to the dbt Trigger Job API. None additional_args Optional[Dict] additional information to pass to the Trigger Job API. For a list of the possible information, have a look at: https://docs.getdbt.com/dbt-cloud/api-v2#operation/triggerRun None account_id_env_var_name Optional[str] the name of the env var that contains the dbt Cloud account ID. Defaults is 'ACCOUNT_ID' . Used only if account_id is None . 'ACCOUNT_ID' job_id_env_var_name Optional[str] the name of the env var that contains the dbt Cloud job ID Default to 'JOB_ID' . Used only if job_id is None . 'JOB_ID' token_env_var_name Optional[str] the name of the env var that contains the dbt Cloud token Default to 'DBT_CLOUD_TOKEN' . Used only if token is None . 'DBT_CLOUD_TOKEN' wait_for_job_run_completion Optional[bool] Whether the task should wait for the job run completion or not. Default is False . False max_wait_time Optional[int] The number of seconds to wait for the dbt Cloud job to finish. Used only if wait_for_job_run_completion is True . None Returns: Type Description Dict When wait_for_job_run_completion is False , then returns the trigger run result. The trigger run result is the dict under the data key. Please refer to the dbt Cloud Trigger Run API documentation for more information regarding the returned payload. When wait_for_job_run_completion is True , then returns the get job result. The get job result is the dict under the data key. Links to the dbt artifacts are also included under the artifact_urls key. Please refere to the dbt Cloud Get Run API documentation for more information regarding the returned payload. Source code in prefect_dbtcloud/tasks.py @task def run_job ( cause : str , api_domain : Optional [ str ] = None , account_id : Optional [ int ] = None , job_id : Optional [ int ] = None , token : Optional [ str ] = None , additional_args : Optional [ Dict ] = None , account_id_env_var_name : Optional [ str ] = \"ACCOUNT_ID\" , job_id_env_var_name : Optional [ str ] = \"JOB_ID\" , token_env_var_name : Optional [ str ] = \"DBT_CLOUD_TOKEN\" , wait_for_job_run_completion : Optional [ bool ] = False , max_wait_time : Optional [ int ] = None , ) -> Dict : \"\"\" Run a dbt Cloud job. Args: cause: A string describing the reason for triggering the job run. api_domain (str, optional): Custom domain for API call. account_id: dbt Cloud account ID. Can also be passed as an env var. job_id: dbt Cloud job ID token: dbt Cloud token. Please note that this token must have access at least to the dbt Trigger Job API. additional_args: additional information to pass to the Trigger Job API. For a list of the possible information, have a look at: https://docs.getdbt.com/dbt-cloud/api-v2#operation/triggerRun account_id_env_var_name: the name of the env var that contains the dbt Cloud account ID. Defaults is `'ACCOUNT_ID'`. Used only if `account_id` is `None`. job_id_env_var_name: the name of the env var that contains the dbt Cloud job ID Default to `'JOB_ID'`. Used only if `job_id` is `None`. token_env_var_name: the name of the env var that contains the dbt Cloud token Default to `'DBT_CLOUD_TOKEN'`. Used only if `token` is `None`. wait_for_job_run_completion: Whether the task should wait for the job run completion or not. Default is `False`. max_wait_time: The number of seconds to wait for the dbt Cloud job to finish. Used only if `wait_for_job_run_completion` is `True`. Raises: `DbtCloudConfigurationException` if the `account_id` is not specified. `DbtCloudConfigurationException` if the `job_id` is not specified. `DbtCloudConfigurationException` if the `token` is not specified. `DbtCloudConfigurationException` if the `cause` is not specified. Returns: When `wait_for_job_run_completion` is `False`, then returns the trigger run result. The trigger run result is the dict under the `data` key. Please refer to the dbt Cloud Trigger Run API documentation for more information regarding the returned payload. When `wait_for_job_run_completion` is `True`, then returns the get job result. The get job result is the dict under the `data` key. Links to the dbt artifacts are also included under the `artifact_urls` key. Please refere to the dbt Cloud Get Run API documentation for more information regarding the returned payload. \"\"\" if account_id is None and account_id_env_var_name in os . environ : account_id = int ( os . environ [ account_id_env_var_name ]) if account_id is None : raise DbtCloudConfigurationException ( \"\"\" dbt Cloud Account ID cannot be None. Please provide an Account ID or the name of the env var that contains it. \"\"\" ) if job_id is None and job_id_env_var_name in os . environ : job_id = int ( os . environ [ job_id_env_var_name ]) if job_id is None : raise DbtCloudConfigurationException ( \"\"\" dbt Cloud Job ID cannot be None. Please provide a Job ID or the name of the env var that contains it. \"\"\" ) if api_domain is None : api_domain = \"cloud.getdbt.com\" if token is None and token_env_var_name in os . environ : token = os . environ . get ( token_env_var_name ) if token is None : raise DbtCloudConfigurationException ( \"\"\" dbt Cloud token cannot be None. Please provide a token or the name of the env var that contains it. \"\"\" ) if cause is None : raise DbtCloudConfigurationException ( \"\"\" Cause cannot be None. Please provide a cause to trigger the dbt Cloud job. \"\"\" ) dbt_cloud_client = dbtCloudClient ( account_id = account_id , token = token , api_domain = api_domain ) job_run = dbt_cloud_client . trigger_job_run ( job_id = job_id , cause = cause , additional_args = additional_args , ) if wait_for_job_run_completion : job_run_id = job_run [ \"id\" ] job_run_result = dbt_cloud_client . wait_for_job_run ( run_id = job_run_id , max_wait_time = max_wait_time , ) artifact_links = [] try : artifact_links = dbt_cloud_client . list_run_artifact_links ( run_id = job_run_id ) except DbtCloudListArtifactsFailed as err : logger = get_run_logger () logger . warning ( f \"Unable to retrieve artifacts generated by dbt Cloud job run: { err } \" ) job_run_result [ \"artifact_urls\" ] = [ link for link , _ in artifact_links ] return job_run_result else : return job_run","title":"Tasks"},{"location":"tasks/#prefect_dbtcloud.tasks","text":"Tasks to interact with dbt Cloud","title":"tasks"},{"location":"tasks/#prefect_dbtcloud.tasks.run_job","text":"Run a dbt Cloud job. Parameters: Name Type Description Default cause str A string describing the reason for triggering the job run. required api_domain str Custom domain for API call. None account_id Optional[int] dbt Cloud account ID. Can also be passed as an env var. None job_id Optional[int] dbt Cloud job ID None token Optional[str] dbt Cloud token. Please note that this token must have access at least to the dbt Trigger Job API. None additional_args Optional[Dict] additional information to pass to the Trigger Job API. For a list of the possible information, have a look at: https://docs.getdbt.com/dbt-cloud/api-v2#operation/triggerRun None account_id_env_var_name Optional[str] the name of the env var that contains the dbt Cloud account ID. Defaults is 'ACCOUNT_ID' . Used only if account_id is None . 'ACCOUNT_ID' job_id_env_var_name Optional[str] the name of the env var that contains the dbt Cloud job ID Default to 'JOB_ID' . Used only if job_id is None . 'JOB_ID' token_env_var_name Optional[str] the name of the env var that contains the dbt Cloud token Default to 'DBT_CLOUD_TOKEN' . Used only if token is None . 'DBT_CLOUD_TOKEN' wait_for_job_run_completion Optional[bool] Whether the task should wait for the job run completion or not. Default is False . False max_wait_time Optional[int] The number of seconds to wait for the dbt Cloud job to finish. Used only if wait_for_job_run_completion is True . None Returns: Type Description Dict When wait_for_job_run_completion is False , then returns the trigger run result. The trigger run result is the dict under the data key. Please refer to the dbt Cloud Trigger Run API documentation for more information regarding the returned payload. When wait_for_job_run_completion is True , then returns the get job result. The get job result is the dict under the data key. Links to the dbt artifacts are also included under the artifact_urls key. Please refere to the dbt Cloud Get Run API documentation for more information regarding the returned payload. Source code in prefect_dbtcloud/tasks.py @task def run_job ( cause : str , api_domain : Optional [ str ] = None , account_id : Optional [ int ] = None , job_id : Optional [ int ] = None , token : Optional [ str ] = None , additional_args : Optional [ Dict ] = None , account_id_env_var_name : Optional [ str ] = \"ACCOUNT_ID\" , job_id_env_var_name : Optional [ str ] = \"JOB_ID\" , token_env_var_name : Optional [ str ] = \"DBT_CLOUD_TOKEN\" , wait_for_job_run_completion : Optional [ bool ] = False , max_wait_time : Optional [ int ] = None , ) -> Dict : \"\"\" Run a dbt Cloud job. Args: cause: A string describing the reason for triggering the job run. api_domain (str, optional): Custom domain for API call. account_id: dbt Cloud account ID. Can also be passed as an env var. job_id: dbt Cloud job ID token: dbt Cloud token. Please note that this token must have access at least to the dbt Trigger Job API. additional_args: additional information to pass to the Trigger Job API. For a list of the possible information, have a look at: https://docs.getdbt.com/dbt-cloud/api-v2#operation/triggerRun account_id_env_var_name: the name of the env var that contains the dbt Cloud account ID. Defaults is `'ACCOUNT_ID'`. Used only if `account_id` is `None`. job_id_env_var_name: the name of the env var that contains the dbt Cloud job ID Default to `'JOB_ID'`. Used only if `job_id` is `None`. token_env_var_name: the name of the env var that contains the dbt Cloud token Default to `'DBT_CLOUD_TOKEN'`. Used only if `token` is `None`. wait_for_job_run_completion: Whether the task should wait for the job run completion or not. Default is `False`. max_wait_time: The number of seconds to wait for the dbt Cloud job to finish. Used only if `wait_for_job_run_completion` is `True`. Raises: `DbtCloudConfigurationException` if the `account_id` is not specified. `DbtCloudConfigurationException` if the `job_id` is not specified. `DbtCloudConfigurationException` if the `token` is not specified. `DbtCloudConfigurationException` if the `cause` is not specified. Returns: When `wait_for_job_run_completion` is `False`, then returns the trigger run result. The trigger run result is the dict under the `data` key. Please refer to the dbt Cloud Trigger Run API documentation for more information regarding the returned payload. When `wait_for_job_run_completion` is `True`, then returns the get job result. The get job result is the dict under the `data` key. Links to the dbt artifacts are also included under the `artifact_urls` key. Please refere to the dbt Cloud Get Run API documentation for more information regarding the returned payload. \"\"\" if account_id is None and account_id_env_var_name in os . environ : account_id = int ( os . environ [ account_id_env_var_name ]) if account_id is None : raise DbtCloudConfigurationException ( \"\"\" dbt Cloud Account ID cannot be None. Please provide an Account ID or the name of the env var that contains it. \"\"\" ) if job_id is None and job_id_env_var_name in os . environ : job_id = int ( os . environ [ job_id_env_var_name ]) if job_id is None : raise DbtCloudConfigurationException ( \"\"\" dbt Cloud Job ID cannot be None. Please provide a Job ID or the name of the env var that contains it. \"\"\" ) if api_domain is None : api_domain = \"cloud.getdbt.com\" if token is None and token_env_var_name in os . environ : token = os . environ . get ( token_env_var_name ) if token is None : raise DbtCloudConfigurationException ( \"\"\" dbt Cloud token cannot be None. Please provide a token or the name of the env var that contains it. \"\"\" ) if cause is None : raise DbtCloudConfigurationException ( \"\"\" Cause cannot be None. Please provide a cause to trigger the dbt Cloud job. \"\"\" ) dbt_cloud_client = dbtCloudClient ( account_id = account_id , token = token , api_domain = api_domain ) job_run = dbt_cloud_client . trigger_job_run ( job_id = job_id , cause = cause , additional_args = additional_args , ) if wait_for_job_run_completion : job_run_id = job_run [ \"id\" ] job_run_result = dbt_cloud_client . wait_for_job_run ( run_id = job_run_id , max_wait_time = max_wait_time , ) artifact_links = [] try : artifact_links = dbt_cloud_client . list_run_artifact_links ( run_id = job_run_id ) except DbtCloudListArtifactsFailed as err : logger = get_run_logger () logger . warning ( f \"Unable to retrieve artifacts generated by dbt Cloud job run: { err } \" ) job_run_result [ \"artifact_urls\" ] = [ link for link , _ in artifact_links ] return job_run_result else : return job_run","title":"run_job()"}]}